#include <quarrot.h>
#include <OpenMesh/Core/Utils/Property.hh>
#include <cassert>
#include <stdexcept>

namespace quarrot {

void simplify(Mesh& mesh)
{
  throw std::logic_error("Not Implemented");
}

static double triangle_alpha(const Mesh& mesh, FaceH fh)
{
  assert(std::distance(mesh.cfv_begin(fh), mesh.cfv_end(fh)) == 3);
  static constexpr double   SQRT_3 = 1.73205080757;
  std::array<glm::dvec3, 3> verts;
  std::transform(mesh.cfv_begin(fh), mesh.cfv_end(fh), verts.begin(), [&mesh](VertH v) {
    return mesh.point(v);
  });
  double sum = 0.;
  for (size_t i = 0; i < 3; ++i) {}

  throw std::logic_error("Not Implemented");
}

static double calc_beta(Mesh& mesh, const OpenMesh::EPropHandleT<double>& beta)
{
  /*
               C
              /|\
             / | \
            /  |  \
           D   |   B
            \  |  /
             \ | /
              \|/
               A
   */
  for (EdgeH eh : mesh.edges()) {
    auto                      he    = mesh.halfedge_handle(eh, 0);
    auto                      ohe   = mesh.opposite_halfedge_handle(he);
    std::array<glm::dvec3, 4> verts = {
      {mesh.point(mesh.from_vertex_handle(he)),
       mesh.point(mesh.to_vertex_handle(mesh.next_halfedge_handle(ohe))),
       mesh.point(mesh.to_vertex_handle(he)),
       mesh.point(mesh.to_vertex_handle(mesh.next_halfedge_handle(he)))}};
    std::array<glm::dvec3, 4> norms = {{mesh.normal(mesh.face_han)}};
  }
  throw std::logic_error("Not Implemented");
}

void pair_triangles(Mesh& mesh)
{
  mesh.update_face_normals();
  OpenMesh::EPropHandleT<double> beta;
  mesh.add_property(beta);
  calc_beta(mesh, beta);
  mesh.remove_property(beta);
}

}  // namespace quarrot
